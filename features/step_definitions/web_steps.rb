# TL;DR: YOU SHOULD DELETE THIS FILE
#
# This file was generated by Cucumber-Rails and is only here to get you a head start
# These step definitions are thin wrappers around the Capybara/Webrat API that lets you
# visit pages, interact with widgets and make assertions about page content.
#
# If you use these step definitions as basis for your features you will quickly end up
# with features that are:
#
# * Hard to maintain
# * Verbose to read
#
# A much better approach is to write your own higher level step definitions, following
# the advice in the following blog posts:
#
# * http://benmabey.com/2008/05/19/imperative-vs-declarative-scenarios-in-user-stories.html
# * http://dannorth.net/2011/01/31/whose-domain-is-it-anyway/
# * http://elabs.se/blog/15-you-re-cuking-it-wrong
#

require 'uri'
require 'cgi'
require File.expand_path(File.join(File.dirname(__FILE__), '..', 'support', 'paths'))
require File.expand_path(File.join(File.dirname(__FILE__), '..', 'support', 'selectors'))

module WithinHelpers
  def with_scope(locator)
    locator ? within(*selector_for(locator)) { yield } : yield
  end
end
World(WithinHelpers)

# web_steps.rb is deprected. Killing them one by one.
#Given /^(?:|I )am on (.+)$/ do |page_name|
#  visit path_to(page_name)
#end

When(/^(?:|I )go to (.+)$/) { |page_name| visit path_to(page_name) }

When(/^(?:|I )am on (.+)$/) { |page_name| expect(current_path).to eq path_to(page_name) }

When(/^(?:|I )press "([^"]*)"$/) { |button| click_button(button) }

When(/^(?:|I )follow "([^"]*)"$/) { |link| click_link(link) }

When(/^(?:|I )fill in "([^"]*)" with "([^"]*)"$/) { |field, value| fill_in(field, with: value) }

When(/^(?:|I )fill in "([^"]*)" for "([^"]*)"$/) { |value, field| fill_in(field, with: value) }

When(/^(?:|I )select "([^"]*)" from "([^"]*)"$/) { |value, field| select(value, from: field) }

When(/^(?:|I )choose "([^"]*)"$/) { |field| choose(field) }

Then(/^(?:|I )should see "([^"]*)"$/) { |text| page.has_content?(text) }

Then(%r{^(?:|I )should see \/([^\/]*)\/$}) do |regexp|
  regexp = Regexp.new(regexp)

  if page.respond_to? :should
    page.should have_xpath('//*', text: regexp)
  else
    assert page.has_xpath?('//*', text: regexp)
  end
end

Then(/^(?:|I )should not see "([^"]*)"$/) do |text|
  if page.respond_to? :should
    page.should have_no_content(text)
  else
    assert page.has_no_content?(text)
  end
end

Then(%r{^(?:|I )should not see \/([^\/]*)\/$}) do |regexp|
  regexp = Regexp.new(regexp)

  if page.respond_to? :should
    page.should have_no_xpath('//*', text: regexp)
  else
    assert page.has_no_xpath?('//*', text: regexp)
  end
end

Then(/^the "([^"]*)" checkbox(?: within (.*))? should be checked$/) do |label, parent|
  with_scope(parent) do
    field_checked = find_field(label)['checked']
    if field_checked.respond_to? :should
      field_checked.should be_true
    else
      assert field_checked
    end
  end
end

Then(/^(?:|I )should be on (.+)$/) do |page_name|
  current_path = URI.parse(current_url).path
  if current_path.respond_to? :should
    current_path.should == path_to(page_name)
  else
    assert_equal path_to(page_name), current_path
  end
end

Then(/^show me the page$/) { save_and_open_page } # rubocop:disable Lint/Debugger

Then(/^I accept the flash message$/) { find('#flash .fa-times-circle').click }
